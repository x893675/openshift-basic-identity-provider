/*
 * openshift basic identity
 *
 * openshift basic identity provider
 *
 * API version: 1.0.0
 * Contact: zhu.xiaowei@99cloud.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"net/http"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//
	"openshift-basic-identity-provider/db"
	sw "openshift-basic-identity-provider/swagger"

	log "github.com/sirupsen/logrus"
)

func main() {
	log.Printf("Server started")

	router := sw.NewRouter()

	db.DB = &db.CRDB{DBLink: db.ConnectDB()}
	defer db.DB.Close()
	if err := db.DB.CreateTable(&db.User{}); err != nil {
		log.Error("create table user_ failed.", err)
		return
	}

	initTable()
	//crt, key := "/etc/origin/master/custom_auth/admin.crt", "/etc/origin/master/custom_auth/admin.key"
	//log.Fatal(http.ListenAndServeTLS(":8080", crt, key, router))
	log.Fatal(http.ListenAndServe(":8080", router))
}

func initTable() {
	admin := db.User{Username: "admin", Password: db.AesEncrypt("admin", *db.SALT_KEY), Email: "admin@admin.com", Name: "admin", Role: 1}
	developer := db.User{Username: "developer", Password: db.AesEncrypt("developer", *db.SALT_KEY), Email: "developer@developer.com", Name: "developer", Role: 2}
	operator := db.User{Username: "operator", Password: db.AesEncrypt("operator", *db.SALT_KEY), Email: "operator@operator.com", Name: "operator", Role: 2}
	_ = db.DB.Save(&admin)
	_ = db.DB.Save(&developer)
	_ = db.DB.Save(&operator)
}
