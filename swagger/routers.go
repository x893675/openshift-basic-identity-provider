/*
 * openshift basic identity
 *
 * openshift basic identity provider
 *
 * API version: 1.0.0
 * Contact: zhu.xiaowei@99cloud.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"strings"

	_ "openshift-basic-identity-provider/statik"

	"github.com/gorilla/mux"
	"github.com/rakyll/statik/fs"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	Middleware  mux.MiddlewareFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	statikFS, err := fs.New()
	if err != nil {
		panic(err)
	}
	staticServer := http.FileServer(statikFS)
	sh := http.StripPrefix("/openshift-basic-identity-provider/1.0.0/api/", staticServer)
	router.PathPrefix("/openshift-basic-identity-provider/1.0.0/api/").Handler(sh)

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		if route.Middleware != nil {
			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(route.Middleware(handler))
		} else {
			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}
	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"CreateUser",
		strings.ToUpper("Post"),
		"/openshift-basic-identity-provider/1.0.0/user",
		CreateUser,
		TokenMiddleware,
	},

	Route{
		"DeleteUser",
		strings.ToUpper("Delete"),
		"/openshift-basic-identity-provider/1.0.0/user/{username}",
		DeleteUser,
		TokenMiddleware,
	},

	// Route{
	// 	"GetUserByName",
	// 	strings.ToUpper("Get"),
	// 	"/openshift-basic-identity-provider/1.0.0/user/{username}",
	// 	GetUserByName,
	// },

	Route{
		"ListUsers",
		strings.ToUpper("Get"),
		"/openshift-basic-identity-provider/1.0.0/users",
		ListUsers,
		TokenMiddleware,
	},

	Route{
		"Login",
		strings.ToUpper("Get"),
		"/openshift-basic-identity-provider/1.0.0/auth/token",
		Login,
		nil,
	},

	Route{
		"LoginForOpenshift",
		strings.ToUpper("Get"),
		"/openshift-basic-identity-provider/1.0.0/auth",
		LoginForOpenshift,
		nil,
	},

	Route{
		"UpdateUser",
		strings.ToUpper("Put"),
		"/openshift-basic-identity-provider/1.0.0/user/{username}",
		UpdateUser,
		TokenMiddleware,
	},

	Route{
		"UserInfo",
		strings.ToUpper("GET"),
		"/openshift-basic-identity-provider/1.0.0/current/user",
		UserInfo,
		TokenMiddleware,
	},

	Route{
		"ResetPassword",
		strings.ToUpper("POST"),
		"/openshift-basic-identity-provider/1.0.0/current/resetpw",
		ResetPassword,
		TokenMiddleware,
	},

	Route{
		"SendResetPasswordMail",
		strings.ToUpper("POST"),
		"/openshift-basic-identity-provider/1.0.0/reset/sendmail",
		SendResetPasswordMail,
		nil,
	},

	Route{
		"MailResetPassword",
		strings.ToUpper("POST"),
		"/openshift-basic-identity-provider/1.0.0/reset/verify/{id:[0-9]+}/{secret}",
		MailResetPassword,
		nil,
	},
}
